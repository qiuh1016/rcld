//
//  uploadRequest.swift
//  renchuanliandong
//
//  Created by qiuhong on 4/1/16.
//  Copyright © 2016 qiuhhong. All rights reserved.
//


import Foundation

class UpLoadRequest: NSObject {
    
    private let boundary: String = "--"
    private let boundaryID: String = "----WebKitFormBoundaryORlx73ddAq4zgHyz"
    var uploadRequest: NSMutableURLRequest?
    var parameterName: String = ""
    var mimType: String?
    var bodyHeader: String?
    var bodyFooter: String?
    var bodyData: NSMutableData = NSMutableData()
    
    //拼接带参数头部
    func httpHeaderStringWithParameters(parameter: String, paramName: String) ->String {
        var header: String = self.boundary+self.boundaryID+"\r\n"
        
        header += "Content-Disposition: form-data;name=\"\(paramName)\"\r\n"
        header += parameter+"\r\n"
        
        return header
        
    }
    //拼接带文件的头部
    func httpHeaderStringWithFile(mimType: String, upLoadFileName: String) ->String {
        
        var header: String = self.boundary+self.boundaryID+"\r\n"
        
        header += "Content-Disposition: form-data; name=\"personPicture\"; filename=\"\(upLoadFileName)\"\r\n"
        header += "Content-Type: \(mimType)\r\n\r\n"
        //        header += "Content-Transfer-Encoding: binary\r\n"
        self.bodyHeader = header
        
        return header
    }
    
    //拼接底部
    func httpBottomString() -> String {
        
        var footer: String = self.boundary+self.boundaryID+self.boundary
        footer += "\r\n"
        self.bodyFooter = footer
        
        return footer
    }
    
    //指定全路径文件的mimType
    func mimTypeWithFilePath(filePath: String) {
        
        if !NSFileManager.defaultManager().fileExistsAtPath(filePath) {
            return
        }
        
        let url = NSURL(fileURLWithPath: filePath)
        let request = NSMutableURLRequest(URL: url)
        
        var response: NSURLResponse?
        
        do {
            try NSURLConnection.sendSynchronousRequest(request, returningResponse: &response)
            self.mimType = response!.MIMEType
        } catch {
            print(error)
            return
        }
    }
    
    //初始化请求
    init(URL: NSURL, fileName: String, filePath: String)  {
        super.init()
        self.mimTypeWithFilePath(filePath)
        if self.mimType == nil { return }
        
        self.bodyData.appendData(self.httpHeaderStringWithFile(self.mimType!, upLoadFileName: fileName) .dataUsingEncoding(NSUTF8StringEncoding)!)
        //尾部
        self.bodyData.appendData(NSData(contentsOfFile: filePath)!)
        self.bodyData.appendData("\r\n".dataUsingEncoding(NSUTF8StringEncoding)!)
        self.bodyData.appendData(self.httpBottomString().dataUsingEncoding(NSUTF8StringEncoding)!)
        
        let mutableRequest = NSMutableURLRequest(URL: URL, cachePolicy: NSURLRequestCachePolicy.UseProtocolCachePolicy, timeoutInterval: 10)
        mutableRequest.HTTPMethod = "POST"
        mutableRequest.HTTPBody = self.bodyData
        mutableRequest.addValue("multipart/form-data; boundary=\(self.boundaryID)", forHTTPHeaderField: "Content-Type")
        mutableRequest.addValue("\(self.bodyData.length)", forHTTPHeaderField: "Content-Length")
        self.uploadRequest = mutableRequest
    }
}
